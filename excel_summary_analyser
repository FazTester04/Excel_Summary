import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import os
import random


def analyze_excel(file_path):
    try:
        df = pd.read_excel(file_path, sheet_name="SUMMARY TAB")
    except ValueError:
        messagebox.showerror("Error", "Sheet 'SUMMARY TAB' not found!")
        return
    except Exception as e:
        messagebox.showerror("Error", f"Failed to open file:\n{e}")
        return

    if 'Status' not in df.columns:
        messagebox.showerror("Error", " 'Status' column not found in 'SUMMARY TAB' sheet.")
        return

  
    df['Status'] = df['Status'].astype(str).str.strip().str.upper()
    categories = ['PASS', 'FAIL', 'N/A', 'NOT TESTED']
    summary = df['Status'].value_counts().reindex(categories, fill_value=0)


    summary_df = summary.reset_index()
    summary_df.columns = ['Status', 'Count']
    output_file = os.path.join(os.getcwd(), "summary_output.csv")
    summary_df.to_csv(output_file, index=False)

    show_summary_popup(file_path, summary_df, output_file)

def show_summary_popup(file_path, summary_df, output_file):
    popup = tk.Toplevel()
    popup.title("Test Summary Report")
    popup.geometry("750x500")

    tk.Label(popup, text=f"ðŸ“Š Summary from: {os.path.basename(file_path)}", font=("Arial", 13, "bold")).pack(pady=10)
    tk.Label(popup, text=f"ðŸ’¾ Saved to: {output_file}", font=("Arial", 9), fg="gray").pack()


    frame = tk.Frame(popup)
    frame.pack(pady=10, fill="both", expand=True)

    
    table_frame = tk.Frame(frame)
    table_frame.pack(side="left", padx=20, pady=20)

    tk.Label(table_frame, text="Summary Table", font=("Arial", 11, "bold")).pack(pady=5)

    tree = ttk.Treeview(table_frame, columns=("Status", "Count"), show="headings", height=5)
    tree.heading("Status", text="Status")
    tree.heading("Count", text="Count")
    tree.column("Status", width=100, anchor="center")
    tree.column("Count", width=80, anchor="center")

    for _, row in summary_df.iterrows():
        tree.insert("", "end", values=(row["Status"], row["Count"]))
    tree.pack()

    
    fig, axes = plt.subplots(1, 2, figsize=(6, 3))
    fig.tight_layout(pad=3)

   
    axes[0].pie(summary_df["Count"], labels=summary_df["Status"], autopct="%1.1f%%", startangle=90)
    axes[0].set_title("Pie Chart")

    
    axes[1].bar(summary_df["Status"], summary_df["Count"])
    axes[1].set_title("Bar Chart")
    axes[1].set_ylabel("Count")

    chart_canvas = FigureCanvasTkAgg(fig, master=frame)
    chart_canvas.draw()
    chart_canvas.get_tk_widget().pack(side="right", fill="both", expand=True, padx=20)

    tk.Button(popup, text="Close", command=popup.destroy, font=("Arial", 10)).pack(pady=10)


def open_file():
    file_path = filedialog.askopenfilename(
        title="Select Excel File",
        filetypes=[("Excel files", "*.xlsx *.xls")]
    )
    if file_path:
        analyze_excel(file_path)


def create_mock_excel():
    statuses = ['PASS', 'FAIL', 'N/A', 'NOT TESTED']
    data = {
        "Test ID": [f"TC_{i:03}" for i in range(1, 21)],
        "Status": [random.choice(statuses) for _ in range(20)]
    }
    df = pd.DataFrame(data)
    file_path = os.path.join(os.getcwd(), "mock_test_results.xlsx")
    with pd.ExcelWriter(file_path) as writer:
        df.to_excel(writer, sheet_name="SUMMARY TAB", index=False)
        pd.DataFrame({"Note": ["Generated for testing"]}).to_excel(writer, sheet_name="INFO", index=False)

    messagebox.showinfo("Mock Created", f" Mock Excel created:\n{file_path}")


def drop_event(event):
    file_path = event.data.strip("{}")
    if os.path.isfile(file_path) and file_path.endswith(('.xlsx', '.xls')):
        analyze_excel(file_path)
    else:
        messagebox.showerror("Invalid File", "Please drop a valid Excel file (.xlsx or .xls)")


try:
    from tkinterdnd2 import DND_FILES, TkinterDnD
    root = TkinterDnD.Tk()
except ImportError:
    root = tk.Tk()
    messagebox.showwarning("Missing Library", "Drag & drop feature needs 'tkinterdnd2'\nInstall via:\n\npip install tkinterdnd2")

root.title("Excel Summary Analyzer")
root.geometry("460x400")

label = tk.Label(root, text="Drag & Drop Excel file below\nor click 'Select Excel File'", font=("Arial", 12))
label.pack(pady=15)

drop_frame = tk.Label(root, text="Drop Excel File Here", font=("Arial", 11),
                      bg="#e3e3e3", relief="ridge", width=40, height=4)
drop_frame.pack(pady=5)
if isinstance(root, type(tk.Tk())):
    pass
else:
    drop_frame.drop_target_register(DND_FILES)
    drop_frame.dnd_bind('<<Drop>>', drop_event)

button_frame = tk.Frame(root)
button_frame.pack(pady=10)
tk.Button(button_frame, text="Select Excel File", command=open_file, font=("Arial", 10)).grid(row=0, column=0, padx=10)
tk.Button(button_frame, text="Generate Mock Excel", command=create_mock_excel, font=("Arial", 10)).grid(row=0, column=1, padx=10)

root.mainloop()
